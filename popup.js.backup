// YouTube Summarizer Popup Script

document.addEventListener('DOMContentLoaded', initializePopup);

async function initializePopup() {
  const apiKeyInput = document.getElementById('api-key');
  const toggleVisibilityBtn = document.getElementById('toggle-visibility');
  const saveBtn = document.getElementById('save-settings');
  const statusIcon = document.getElementById('status-icon');
  const statusText = document.getElementById('status-text');

  // Load saved API key
  const result = await chrome.storage.sync.get(['openai_api_key']);
  if (result.openai_api_key) {
    apiKeyInput.value = result.openai_api_key;
    updateStatus('✅', 'API key configured', 'success');
  }

  // Toggle API key visibility
  toggleVisibilityBtn.addEventListener('click', () => {
    if (apiKeyInput.type === 'password') {
      apiKeyInput.type = 'text';
      toggleVisibilityBtn.textContent = '🙈';
    } else {
      apiKeyInput.type = 'password';
      toggleVisibilityBtn.textContent = '👁️';
    }
  });

  // Save settings
  saveBtn.addEventListener('click', async () => {
    const apiKey = apiKeyInput.value.trim();
    
    if (!apiKey) {
      updateStatus('❌', 'Please enter an API key', 'error');
      return;
    }

    if (!apiKey.startsWith('sk-')) {
      updateStatus('⚠️', 'Invalid API key format', 'warning');
      return;
    }

    try {
      // Test the API key
      updateStatus('⏳', 'Validating API key...', 'loading');
      
      const isValid = await validateApiKey(apiKey);
      
      if (isValid) {
        await chrome.storage.sync.set({ openai_api_key: apiKey });
        updateStatus('✅', 'API key saved successfully!', 'success');
        
        // Auto-close popup after success
        setTimeout(() => window.close(), 1500);
      } else {
        updateStatus('❌', 'Invalid API key', 'error');
      }
    } catch (error) {
      console.error('Error validating API key:', error);
      updateStatus('❌', 'Failed to validate API key', 'error');
    }
  });

  // Enter key to save
  apiKeyInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      saveBtn.click();
    }
  });

  // Auto-focus API key input if empty
  if (!apiKeyInput.value) {
    apiKeyInput.focus();
  }
}

function updateStatus(icon, text, type) {
  const statusIcon = document.getElementById('status-icon');
  const statusText = document.getElementById('status-text');
  
  statusIcon.textContent = icon;
  statusText.textContent = text;
  
  // Remove all status classes
  statusText.classList.remove('success', 'error', 'warning', 'loading');
  
  // Add appropriate class
  if (type) {
    statusText.classList.add(type);
  }
}

async function validateApiKey(apiKey) {
  try {
    const response = await fetch('https://api.openai.com/v1/models', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
    });

    return response.ok;
  } catch (error) {
    console.error('API validation error:', error);
    return false;
  }
}

// Handle external links
document.addEventListener('click', (e) => {
  if (e.target.tagName === 'A' && e.target.href) {
    e.preventDefault();
    chrome.tabs.create({ url: e.target.href });
  }
});
