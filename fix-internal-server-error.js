// Fix Internal Server Error - Comprehensive Solution
// Copy this content and replace sections in background.js

console.log('üîß FIXING INTERNAL SERVER ERROR');
console.log('================================');

// STEP 1: Fix outdated model references
// REPLACE line 342 in background.js:
// FROM: console.log('üöÄ Using secure GPT-5 nano backend for summarization');
// TO:   console.log('üöÄ Using secure gpt-4o-mini backend for summarization');

// FROM: console.log('‚úÖ Summary generated successfully with GPT-5 nano');
// TO:   console.log('‚úÖ Summary generated successfully with gpt-4o-mini');

// STEP 2: Enhanced handleAdvancedSummarization with better error handling
const FIXED_handleAdvancedSummarization = `
async function handleAdvancedSummarization(requestData) {
  try {
    console.log('üîç handleAdvancedSummarization called with:', {
      hasTranscript: !!requestData.transcript,
      transcriptLength: requestData.transcript ? requestData.transcript.length : 0,
      videoId: requestData.videoId,
      type: requestData.type,
      length: requestData.length,
      format: requestData.format
    });

    // Get user authentication token
    const userToken = await getUserToken();
    console.log('üîë User token check:', {
      hasToken: !!userToken,
      tokenLength: userToken ? userToken.length : 0
    });
    
    if (!userToken) {
      console.error('‚ùå No authentication token found');
      throw new Error('Please sign in to use the summarizer');
    }

    // Validate input data
    if (!requestData.transcript || requestData.transcript.trim() === '') {
      console.error('‚ùå Empty transcript provided');
      throw new Error('No transcript available for this video');
    }

    if (!requestData.videoId) {
      console.error('‚ùå No video ID provided');
      throw new Error('Video ID is required');
    }

    console.log('üöÄ Using secure gpt-4o-mini backend for summarization');
    console.log('üìä Request data:', {
      videoId: requestData.videoId,
      type: requestData.type,
      length: requestData.length,
      format: requestData.format,
      transcriptLength: requestData.transcript.length
    });

    console.log('üåç Environment config:', {
      apiBaseUrl: CONFIG.API_BASE_URL,
      isDevelopment: CONFIG.environment?.isDevelopment,
      isProduction: CONFIG.environment?.isProduction
    });

    // Call secure backend with gpt-4o-mini
    const response = await callSecureBackend('/summarizer/summarize', {
      transcript: requestData.transcript,
      videoId: requestData.videoId,
      type: requestData.type,
      length: requestData.length,
      format: requestData.format
    }, userToken);

    console.log('‚úÖ Summary generated successfully with gpt-4o-mini');
    
    if (response.metadata) {
      console.log('üìà Cost info:', {
        model: response.metadata.model,
        fromCache: response.metadata.fromCache,
        costSaved: response.metadata.costSaved
      });
    }

    if (!response.summary) {
      console.error('‚ùå No summary in response:', response);
      throw new Error('No summary generated by backend');
    }

    console.log('‚úÖ Returning summary of length:', response.summary.length);
    return response.summary;
    
  } catch (error) {
    console.error('‚ùå Secure summarization error:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    // Provide more specific error messages
    if (error.message.includes('fetch')) {
      throw new Error('Unable to connect to backend server. Please check if the server is running.');
    } else if (error.message.includes('Authentication')) {
      throw new Error('Authentication failed. Please sign in again.');
    } else if (error.message.includes('Rate limit')) {
      throw new Error('Rate limit exceeded. Please try again in a few minutes.');
    } else {
      throw error;
    }
  }
}`;

// STEP 3: Enhanced message listener with better logging
const FIXED_messageListener = `
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('üì® Message received in background script:', {
    action: request.action,
    hasData: !!request.data,
    sender: sender.tab ? \`Tab \${sender.tab.id}\` : 'Extension',
    timestamp: new Date().toISOString()
  });
  
  // Add try-catch around all message handling
  try {
    if (request.action === 'summarize') {
      console.log('üéØ Handling summarize action');
      handleSummarization(request.transcript, request.videoId)
        .then(summary => {
          console.log('‚úÖ Summarize success, sending response');
          sendResponse({ summary });
        })
        .catch(error => {
          console.error('‚ùå Summarize error:', error);
          sendResponse({ error: error.message });
        });
      return true;
    }
    
    if (request.action === 'summarizeAdvanced') {
      console.log('üéØ Handling summarizeAdvanced action');
      console.log('üöÄ Summarizing advanced inside listener:', request.data);
      
      handleAdvancedSummarization(request.data)
        .then(summary => {
          console.log('‚úÖ Advanced summarize success, sending response');
          sendResponse({ summary });
        })
        .catch(error => {
          console.error('‚ùå Advanced summarize error:', error);
          sendResponse({ error: error.message });
        });
      return true;
    }
    
    // ... other actions remain the same ...
    
  } catch (error) {
    console.error('‚ùå Message listener error:', error);
    sendResponse({ error: 'Internal extension error: ' + error.message });
    return true;
  }
});`;

// STEP 4: Enhanced environment detection
const FIXED_environmentDetection = `
// Environment detection and configuration for service workers
let environmentCache = null;

const detectEnvironment = async () => {
  if (environmentCache) {
    return environmentCache;
  }
  
  console.log('üîç Detecting environment...');
  
  // Check stored preference first
  try {
    const stored = await chrome.storage.local.get(['environment_preference']);
    if (stored.environment_preference) {
      console.log('üîß Using stored environment preference:', stored.environment_preference);
      environmentCache = stored.environment_preference;
      return environmentCache;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Could not read stored environment preference:', error);
  }
  
  // Try to ping localhost API with very short timeout
  try {
    console.log('üîç Testing localhost API accessibility...');
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 1000); // 1 second timeout
    
    const response = await fetch('http://localhost:3001/api/health', {
      method: 'GET',
      signal: controller.signal,
      headers: { 'Accept': 'application/json' }
    });
    
    clearTimeout(timeoutId);
    
    if (response.ok) {
      console.log('‚úÖ Localhost API accessible - using DEVELOPMENT mode');
      environmentCache = { isDevelopment: true, isProduction: false };
      return environmentCache;
    }
  } catch (error) {
    console.log('‚ùå Localhost API not accessible:', error.message);
  }
  
  // Default to production
  console.log('üåê Using PRODUCTION mode');
  environmentCache = { isDevelopment: false, isProduction: true };
  return environmentCache;
};

const getAPIBaseURL = async () => {
  const env = await detectEnvironment();
  
  if (env.isDevelopment) {
    console.log('üè† Using localhost API');
    return 'http://localhost:3001/api';
  } else {
    console.log('üåê Using production API');
    return 'https://api.clicksummary.com/api';
  }
};

// Initialize CONFIG asynchronously with better error handling
let CONFIG = {
  API_BASE_URL: 'http://localhost:3001/api', // Default to localhost
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 1000,
  environment: { isDevelopment: true, isProduction: false }
};

// Initialize environment detection with retry
(async () => {
  try {
    console.log('üöÄ Initializing background script environment...');
    
    const environment = await detectEnvironment();
    const apiBaseURL = await getAPIBaseURL();
    
    CONFIG = {
      API_BASE_URL: apiBaseURL,
      RETRY_ATTEMPTS: 3,
      RETRY_DELAY: 1000,
      environment
    };
    
    console.log('‚úÖ Background script initialized successfully');
    console.log(\`üåç Environment: \${CONFIG.environment.isDevelopment ? 'DEVELOPMENT' : 'PRODUCTION'}\`);
    console.log(\`üîó API Base URL: \${CONFIG.API_BASE_URL}\`);
    
  } catch (error) {
    console.error('‚ùå Background script initialization failed:', error);
    console.log('üîÑ Using localhost fallback configuration');
    
    // Fallback to localhost if detection fails
    CONFIG = {
      API_BASE_URL: 'http://localhost:3001/api',
      RETRY_ATTEMPTS: 3,
      RETRY_DELAY: 1000,
      environment: { isDevelopment: true, isProduction: false }
    };
  }
})();`;

console.log('‚úÖ Fixed code blocks prepared');
console.log('üìù Manual steps required:');
console.log('1. Replace handleAdvancedSummarization function in background.js');
console.log('2. Update model references from GPT-5 nano to gpt-4o-mini');
console.log('3. Enhanced environment detection');
console.log('4. Better error handling in message listener');
